문제를 보고 해결하는 방법은 간단했지만 마지막에 문제를 가장 많이 맞은 사람의 인덱스를 뽑아내는 과정에서 생각을 했다.
3명 밖에 되지않아서 그냥 일일이 조건문을 걸어줘서 뽑아내려고 했지만 너무 코드가 지저분 한것 같아서 먼가 깔끔한 방법을 찾다가
정렬하는 방법을 생각했다 이 부분을 작성하면서 다시한번 pair<int,int> 를 정렬하는데에 cmp를 작성하는법을 다시 숙지했고
해결했다.
다른 더 효율적인 코드는 없을까 살펴봤고
굳이 정렬을 하지않고 3명중에서 최댓값을 구해서 비교하는 방법도 있었다. 인원이 3명으로 적기에 알맞은 방법이라고 생각해서 다시 작성해보았다.
하지만 인원이 많아진다면 정렬하는 방법도 효율적이라고 생각한다.


--------------------처음 작성한 코드---------------------------
#include <string>
#include <vector>
#include<algorithm>

using namespace std;

bool cmp(pair<int,int> a,pair<int,int> b){
    if(a.first==b.first){return a.second<b.second;}
    else{return a.first>b.first;}
}
vector<int> solution(vector<int> answers) {
    vector<int> answer;
    int arr1[5]={1,2,3,4,5};
    int arr2[8]={2,1,2,3,2,4,2,5};
    int arr3[10]={3,3,1,1,2,2,4,4,5,5};
    vector<pair<int,int>> vec;
    vec.push_back({0,1});
    vec.push_back({0,2});
    vec.push_back({0,3});
    
    for(int i=0;i<answers.size();i++){
        if(answers[i]==arr1[i%5]){vec[0].first++;}
        if(answers[i]==arr2[i%8]){vec[1].first++;}
        if(answers[i]==arr3[i%10]){vec[2].first++;}
    }
    sort(vec.begin(),vec.end(),cmp);
    answer.push_back(vec[0].second);
    if(vec[0].first==vec[1].first){answer.push_back(vec[1].second);}
    if(vec[0].first==vec[2].first){answer.push_back(vec[2].second);}
    return answer;
}


--------------------다시 작성한 코드---------------------------
#include <string>
#include <vector>
#include<algorithm>

using namespace std;

vector<int> solution(vector<int> answers) {
    vector<int> answer;
    int arr1[5]={1,2,3,4,5};
    int arr2[8]={2,1,2,3,2,4,2,5};
    int arr3[10]={3,3,1,1,2,2,4,4,5,5};
   int n1=0,n2=0,n3=0;
    
    for(int i=0;i<answers.size();i++){
        if(answers[i]==arr1[i%5]){n1++;}
        if(answers[i]==arr2[i%8]){n2++;}
        if(answers[i]==arr3[i%10]){n3++;}
    }
    int res=max(max(n1,n2),n3);
    
    if(res==n1){answer.push_back(1);}
    if(res==n2){answer.push_back(2);}
    if(res==n3){answer.push_back(3);}
    
    return answer;
}
